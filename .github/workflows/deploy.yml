name: Deploy Tusk API

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug Directory Structure
      run: |
        echo "Workspace: ${{ github.workspace }}"
        ls -la ${{ github.workspace }}
        cat ${{ github.workspace }}/go.mod || echo "go.mod not found"
        find ${{ github.workspace }} -name "*_test.go" || echo "No test files found"

    - name: Run Tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/app golang:1.24-alpine sh -c "cd /app && go test ./... || echo 'No tests found or test setup failed, continuing deployment'"
      continue-on-error: true

    - name: Create .env
      run: |
        echo "Creating .env in ${{ github.workspace }}"
        touch ${{ github.workspace }}/.env || { echo "Failed to create .env file"; exit 1; }
        echo "Writing environment variables to .env"
        cat << EOF > ${{ github.workspace }}/.env
        APP_NAME=${{ vars.APP_NAME }}
        APP_MODE=${{ vars.APP_MODE }}
        SERVER_PORT=${{ vars.SERVER_PORT }}
        DB_DRIVER=${{ vars.DB_DRIVER }}
        DB_HOST=${{ vars.DB_HOST }}
        DB_PORT=${{ vars.DB_PORT }}
        DB_NAME=${{ vars.DB_NAME }}
        DB_USER=${{ vars.DB_USER }}
        DB_PASS=${{ secrets.DB_PASS }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        ACCESS_TOKEN_TTL=${{ vars.ACCESS_TOKEN_TTL }}
        MAIL_HOST=${{ vars.MAIL_HOST }}
        MAIL_PORT=${{ vars.MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        MAIL_SENDER=${{ secrets.MAIL_SENDER }}
        EOF
        echo "Verifying .env content:"
        cat ${{ github.workspace }}/.env || { echo "Failed to read .env"; exit 1; }
        echo ".env file created successfully"

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_PRIVATE_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Ensure directory exists
          mkdir -p /var/www/html/domains/tusk
          cd /var/www/html/domains/tusk

          # Clone repo if it doesn't exist
          if [ ! -d .git ]; then
            git clone https://github.com/codetheuri/Tusk.git .
            git checkout main
          else
            git fetch origin
            git reset --hard origin/main
          fi

          # Copy .env to host
          cp ${{ github.workspace }}/.env .env || { echo "Failed to copy .env"; exit 1; }

          # Verify docker-compose.yml exists
          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml not found"; exit 1;
          fi

          # Rebuild and restart Tusk container
          docker-compose down
          docker-compose up -d --build || { echo "Docker compose failed"; exit 1; }

          # Wait for container to be healthy
          for i in {1..30}; do
            if docker inspect --format='{{.State.Health.Status}}' tusk-api | grep -q "healthy"; then
              break
            fi
            sleep 2
          done

          # Run database migrations
          docker exec tusk-api ./tusk_migrate up || { echo "Migrations failed"; exit 1; }

          # Prune unused Docker resources
          docker container prune -f
          docker image prune -af
          docker volume prune -f

          # Restart main Nginx
          docker restart nginx || { echo "Nginx restart failed"; exit 1; }

          # Clean system logs
          sudo journalctl --vacuum-size=100M