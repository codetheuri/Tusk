name: Deploy Tusk API

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug Directory Structure
      run: |
        echo "Workspace: ${{ github.workspace }}"
        ls -la ${{ github.workspace }}
        find ${{ github.workspace }} -name "*.go" | head -10

    - name: Run Tests
      run: |
        docker run --rm -v ${{ github.workspace }}:/app golang:1.24-alpine sh -c "cd /app && go test ./... -v || echo 'Tests completed'"
      continue-on-error: true

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_PRIVATE_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          set -e  # Exit on error
          echo "🚀 Starting Tusk API deployment..."
          
          # Navigate to project directory
          cd /var/www/html/domains/tusk
          
          # Clean up .env conflicts
          echo "🧹 Cleaning up environment..."
          if [ -d .env ]; then
            echo "Removing .env directory..."
            rm -rf .env
          fi
          [ -f .env ] && rm -f .env
          
          # Create fresh .env file
          echo "📝 Creating environment file..."
          cat > .env << EOF
          APP_NAME=${{ vars.APP_NAME }}
          APP_MODE=${{ vars.APP_MODE }}
          SERVER_PORT=${{ vars.SERVER_PORT }}
          DB_DRIVER=${{ vars.DB_DRIVER }}
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=${{ vars.DB_PORT }}
          DB_NAME=${{ vars.DB_NAME }}
          DB_USER=${{ vars.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ACCESS_TOKEN_TTL=${{ vars.ACCESS_TOKEN_TTL }}
          MAIL_HOST=${{ vars.MAIL_HOST }}
          MAIL_PORT=${{ vars.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_SENDER=${{ secrets.MAIL_SENDER }}
          EOF

          echo "✅ Environment file created"
          ls -la .env
          
          # Clone or update repository
          if [ ! -d .git ]; then
            echo "📥 Cloning repository..."
            git clone https://github.com/codetheuri/Tusk.git .
          else
            echo "🔄 Updating repository..."
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Verify critical files
          echo "🔍 Verifying project files..."
          [ -f docker-compose.yml ] || { echo "❌ docker-compose.yml missing"; exit 1; }
          [ -f Dockerfile ] || { echo "❌ Dockerfile missing"; exit 1; }
          
          # Deploy with Docker
          echo "🐳 Deploying with Docker Compose..."
          docker-compose down
          docker-compose up -d --build
          
          # Wait for service to be healthy
          echo "⏳ Waiting for service to be healthy..."
          for i in {1..30}; do
            if docker ps | grep -q "tusk-api.*Up"; then
              echo "✅ Container is running"
              break
            fi
            sleep 2
          done
          
          # Run migrations
          echo "🗃️ Running database migrations..."
          docker exec tusk-api ./tusk_migrate up || echo "⚠️ Migrations may have failed or already applied"
          
          # Cleanup
          echo "🧹 Cleaning up Docker resources..."
          docker system prune -f
          
          echo "🎉 Tusk API deployment completed!"